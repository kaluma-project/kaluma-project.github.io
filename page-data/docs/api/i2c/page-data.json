{
    "componentChunkName": "component---src-templates-doc-js",
    "path": "/docs/api/i2c",
    "result": {"data":{"markdownRemark":{"frontmatter":{"layout":"doc.js","slug":"docs/api/i2c","title":"I2C"},"html":"<h1 id=\"i2c\" style=\"position:relative;\"><a href=\"#i2c\" aria-label=\"i2c permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I2C</h1>\n<p>The <code class=\"language-text\">i2c</code> module supports communication with I2C (Inter-Integrated Circuit) / TWI (Two Wire Interface) devices. Use <code class=\"language-text\">require('i2c')</code> to access this module.</p>\n<blockquote>\n<p>Slave Mode is NOT supported yet.</p>\n</blockquote>\n<h2 id=\"class-i2c\" style=\"position:relative;\"><a href=\"#class-i2c\" aria-label=\"class i2c permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class: I2C</h2>\n<p>An instances of <code class=\"language-text\">I2C</code> represents a I2C bus.</p>\n<h3 id=\"i2cmaster\" style=\"position:relative;\"><a href=\"#i2cmaster\" aria-label=\"i2cmaster permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I2C.MASTER</h3>\n<ul>\n<li><code class=\"language-text\">&lt;number></code> = <code class=\"language-text\">0</code></li>\n</ul>\n<h3 id=\"i2cslave\" style=\"position:relative;\"><a href=\"#i2cslave\" aria-label=\"i2cslave permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I2C.SLAVE</h3>\n<ul>\n<li><code class=\"language-text\">&lt;number></code> = <code class=\"language-text\">1</code></li>\n</ul>\n<h3 id=\"new-i2cbus-options\" style=\"position:relative;\"><a href=\"#new-i2cbus-options\" aria-label=\"new i2cbus options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>new I2C(bus[, options])</h3>\n<ul>\n<li><strong><code class=\"language-text\">bus</code></strong> <code class=\"language-text\">&lt;number></code> I2C bus number.</li>\n<li>**<code class=\"language-text\">options</code> ** <code class=\"language-text\">&lt;object></code> The object of I2C options. <em>Default values are depends on board (Check in a board page).</em>\n<ul>\n<li><strong><code class=\"language-text\">mode</code></strong> <code class=\"language-text\">&lt;number></code> I2C mode, <code class=\"language-text\">I2C.MASTER</code> or <code class=\"language-text\">I2C.SLAVE</code> mode. <strong>Default:</strong> <code class=\"language-text\">I2C.MASTER</code></li>\n<li><strong><code class=\"language-text\">baudrate</code></strong> <code class=\"language-text\">&lt;number></code> Clock speed (bit/s) for Master mode.</li>\n<li><strong><code class=\"language-text\">scl</code></strong> <code class=\"language-text\">&lt;number></code> SCL pin number. <code class=\"language-text\">-1</code> Not to use this pin. <strong>Default:</strong> board dependent. Check the <code class=\"language-text\">Boards</code> document.</li>\n<li><strong><code class=\"language-text\">sda</code></strong> <code class=\"language-text\">&lt;number></code> SDA pin number. <code class=\"language-text\">-1</code> Not to use this pin. <strong>Default:</strong> board dependent. Check the <code class=\"language-text\">Boards</code> document.</li>\n</ul>\n</li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;object></code> The return value is <code class=\"language-text\">I2C</code> object.</li>\n</ul>\n<p>Instances of the <code class=\"language-text\">I2C</code> class can be created using the <code class=\"language-text\">new</code> keyword or by calling <code class=\"language-text\">i2c.I2C()</code> as a function. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">bus</code></strong> exceeds max bus number.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Create the I2C instance with master mode</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">I2C</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// open bus 0 in master mode</span>\n<span class=\"token keyword\">const</span> i2c0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">I2C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// read or write ...</span>\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// open bus 1 in master mode, full speed</span>\n<span class=\"token keyword\">const</span> i2c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">I2C</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token constant\">I2C</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MASTER</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">baudrate</span><span class=\"token operator\">:</span> <span class=\"token number\">400000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// read or write ...</span>\ni2c1<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"i2cwritedata-address-timeout-count\" style=\"position:relative;\"><a href=\"#i2cwritedata-address-timeout-count\" aria-label=\"i2cwritedata address timeout count permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>i2c.write(data, address[, timeout[, count]])</h3>\n<ul>\n<li><strong><code class=\"language-text\">data</code></strong> <code class=\"language-text\">&lt;Uint8Array|string></code> Data to write.</li>\n<li><strong><code class=\"language-text\">address</code></strong> <code class=\"language-text\">&lt;number></code> I2C slave address. (7bit)</li>\n<li><strong><code class=\"language-text\">timeout</code></strong> <code class=\"language-text\">&lt;number></code> Timeout in milliseconds. <strong>Default:</strong> <code class=\"language-text\">5000</code>.</li>\n<li><strong><code class=\"language-text\">count</code></strong> <code class=\"language-text\">&lt;number></code> Indicates how many times to write data. <strong>Default:</strong> <code class=\"language-text\">1</code></li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;number></code> The number of bytes written, <code class=\"language-text\">-1</code> if it failed to write or timeout.</li>\n</ul>\n<p>This method writes data to the specified address (slave device) and returns the number of bytes written. This method can be called only in master mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">I2C</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> i2c0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">I2C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">baudrate</span><span class=\"token operator\">:</span> <span class=\"token number\">50000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// master mode 50 kbits/s</span>\n\n<span class=\"token comment\">// Writes 2 bytes as a Uint8Array</span>\n<span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x6b</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Writes 5 bytes as a string</span>\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"i2creadlength-address-timeout\" style=\"position:relative;\"><a href=\"#i2creadlength-address-timeout\" aria-label=\"i2creadlength address timeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>i2c.read(length, address[, timeout])</h3>\n<ul>\n<li><strong><code class=\"language-text\">length</code></strong> <code class=\"language-text\">&lt;number></code> Data length to read.</li>\n<li><strong><code class=\"language-text\">address</code></strong> <code class=\"language-text\">&lt;number></code> I2C slave address. (7bit)</li>\n<li><strong><code class=\"language-text\">timeout</code></strong> <code class=\"language-text\">&lt;number></code> Timeout in milliseconds. <strong>Default:</strong> <code class=\"language-text\">5000</code>.</li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;Uint8Array></code> An array buffer having data read, <code class=\"language-text\">null</code> if failed to read.</li>\n</ul>\n<p>This method read data from the specified address (slave device) and returns an array buffer object. This method can be called only in master mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">I2C</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> i2c0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">I2C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Read 14 bytes from the address 0x68.</span>\n<span class=\"token keyword\">var</span> buf <span class=\"token operator\">=</span> i2c0<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 14</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// first byte</span>\n<span class=\"token punctuation\">}</span>\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"i2cmemwritedata-address-memaddress-memaddresssize-timeout-count\" style=\"position:relative;\"><a href=\"#i2cmemwritedata-address-memaddress-memaddresssize-timeout-count\" aria-label=\"i2cmemwritedata address memaddress memaddresssize timeout count permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>i2c.memWrite(data, address, memAddress[, memAddressSize[, timeout[, count]]])</h3>\n<ul>\n<li><strong><code class=\"language-text\">data</code></strong> <code class=\"language-text\">&lt;Uint8Array|string></code> Data to write.</li>\n<li><strong><code class=\"language-text\">address</code></strong> <code class=\"language-text\">&lt;number></code> I2C slave address. (7bit)</li>\n<li><strong><code class=\"language-text\">memAddress</code></strong> <code class=\"language-text\">&lt;number></code> Memory address to write.</li>\n<li><strong><code class=\"language-text\">memAddressSize</code></strong> <code class=\"language-text\">&lt;number></code> Size of <code class=\"language-text\">memAddress</code>. Set <code class=\"language-text\">16</code> when <code class=\"language-text\">memAddress</code> is 16-bit address, or set <code class=\"language-text\">8</code> if <code class=\"language-text\">memAddress</code> is 8-bit address. <strong>Default:</strong> <code class=\"language-text\">8</code>.</li>\n<li><strong><code class=\"language-text\">timeout</code></strong> <code class=\"language-text\">&lt;number></code> Timeout in milliseconds. <strong>Default:</strong> <code class=\"language-text\">5000</code>.</li>\n<li><strong><code class=\"language-text\">count</code></strong> <code class=\"language-text\">&lt;number></code> Indicates how many times to write data. <strong>Default:</strong> <code class=\"language-text\">1</code></li>\n<li><strong>Returns:</strong><code class=\"language-text\">&lt;number></code> The number of bytes written, <code class=\"language-text\">-1</code> if failed to write or timeout.</li>\n</ul>\n<p>This method writes data to the memory address in the specified slave device and returns the number of bytes written. This method can be called only in master mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">I2C</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> i2c0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">I2C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Writes 2 bytes at memory address 0x10 of slave 0x68</span>\n<span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x6b</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">memWrite</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"i2cmemreadlength-address-memaddress-memaddresssize-timeout\" style=\"position:relative;\"><a href=\"#i2cmemreadlength-address-memaddress-memaddresssize-timeout\" aria-label=\"i2cmemreadlength address memaddress memaddresssize timeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>i2c.memRead(length, address, memAddress[, memAddressSize[, timeout]])</h3>\n<ul>\n<li><strong><code class=\"language-text\">length</code></strong> <code class=\"language-text\">&lt;number></code> Data length to read.</li>\n<li><strong><code class=\"language-text\">address</code></strong> <code class=\"language-text\">&lt;number></code> I2C slave address. (7bit)</li>\n<li><strong><code class=\"language-text\">memAddress</code></strong> <code class=\"language-text\">&lt;number></code> Memory address to read.</li>\n<li><strong><code class=\"language-text\">memAddressSize</code></strong> <code class=\"language-text\">&lt;number></code> Size of <code class=\"language-text\">memAddress</code>. Set <code class=\"language-text\">16</code> when <code class=\"language-text\">memAddress</code> is 16-bit address, or set <code class=\"language-text\">8</code> when <code class=\"language-text\">memAddress</code> is 8-bit address. <strong>Default:</strong> <code class=\"language-text\">8</code>.</li>\n<li><strong><code class=\"language-text\">timeout</code></strong> <code class=\"language-text\">&lt;number></code> Timeout in milliseconds. <strong>Default:</strong> <code class=\"language-text\">5000</code></li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;Uint8Array></code> A buffer having data read, <code class=\"language-text\">null</code> if failed to read.</li>\n</ul>\n<p>This method read data at memory address from the specified slave device and returns an array buffer object. This method can be called only in master mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">I2C</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> i2c0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">I2C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Read 14 bytes at memory address 0x0100 from slave 0x68</span>\n<span class=\"token keyword\">var</span> buf <span class=\"token operator\">=</span> i2c0<span class=\"token punctuation\">.</span><span class=\"token function\">memRead</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 14</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// first byte</span>\n<span class=\"token punctuation\">}</span>\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"i2cclose\" style=\"position:relative;\"><a href=\"#i2cclose\" aria-label=\"i2cclose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>i2c.close()</h3>\n<p>This method closes the I2C bus.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">I2C</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i2c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> i2c0 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">I2C</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Write or read from I2C ...</span>\n\ni2c0<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Close i2c device</span></code></pre></div>"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"category":"","order":0,"slug":"__home","title":"Home"}},{"frontmatter":{"category":"","order":0,"slug":"__packages","title":"Packages"}},{"frontmatter":{"category":"root","order":2,"slug":"docs/repl","title":"REPL"}},{"frontmatter":{"category":"root","order":1,"slug":"docs/getting-started","title":"Getting Started"}},{"frontmatter":{"category":"root","order":0,"slug":"docs","title":"Introduction"}},{"frontmatter":{"category":"root","order":3,"slug":"docs/tutorials","title":"Tutorials"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico-w","title":"Pico W"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico","title":"Pico"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/adc","title":"ADC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/button","title":"Button"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/analog-io","title":"Analog I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/at-command","title":"AT Command"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/console","title":"Console"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/digital-io","title":"Digital I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/cyw43","title":"CYW43"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/device-driver","title":"Device Driver"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/board","title":"Board"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/errors","title":"Errors"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/events","title":"Events"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/file-system","title":"File system"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/flash","title":"Flash"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/global","title":"Global"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/gpio","title":"GPIO"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/graphics","title":"Graphics"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/http","title":"HTTP"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/i2c","title":"I2C"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/interrupts","title":"Interrupts"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/led","title":"LED"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/net","title":"Net"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/path","title":"Path"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/process","title":"Process"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/pwm","title":"PWM"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rp2","title":"RP2"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rtc","title":"RTC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/sdcard","title":"SDCard"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/spi","title":"SPI"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/storage","title":"Storage"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/stream","title":"Stream"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/timers","title":"Timers"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/uart","title":"UART"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/url","title":"URL"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wifi","title":"Wi-Fi"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wdt","title":"WDT"}}]}},"pageContext":{"slug":"docs/api/i2c"}},
    "staticQueryHashes": []}