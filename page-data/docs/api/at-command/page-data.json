{
    "componentChunkName": "component---src-templates-doc-js",
    "path": "/docs/api/at-command",
    "result": {"data":{"markdownRemark":{"frontmatter":{"layout":"doc.js","slug":"docs/api/at-command","title":"AT Command"},"html":"<h1 id=\"at-command\" style=\"position:relative;\"><a href=\"#at-command\" aria-label=\"at command permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AT Command</h1>\n<blockquote>\n<p><strong>THIS IS EXPERIMENTAL AND SUBJECT OF CHANGE</strong></p>\n</blockquote>\n<p>The <code class=\"language-text\">at</code> module supports sending AT commands and handling the responses. This module is useful for the devices controlled by AT command such as Wi-Fi, GSM, Bluetooth modules. Use <code class=\"language-text\">require('at')</code> to access this module.</p>\n<h2 id=\"class-atcommand\" style=\"position:relative;\"><a href=\"#class-atcommand\" aria-label=\"class atcommand permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class: ATCommand</h2>\n<p>An instances of <code class=\"language-text\">ATCommand</code> represents a AT command handler. This class is a subclass of <a href=\"/docs/api/events\"><code class=\"language-text\">EventEmitter</code></a>.</p>\n<h3 id=\"new-atcommanduart-options\" style=\"position:relative;\"><a href=\"#new-atcommanduart-options\" aria-label=\"new atcommanduart options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>new ATCommand(uart[, options])</h3>\n<ul>\n<li><strong><code class=\"language-text\">uart</code></strong> <code class=\"language-text\">&lt;UART></code> UART object where a device is connected which controlled by AT command.</li>\n<li><strong><code class=\"language-text\">options</code></strong> <code class=\"language-text\">&lt;object></code> \n<ul>\n<li><strong><code class=\"language-text\">debug</code></strong> <code class=\"language-text\">&lt;boolean></code> Print all data received from UART if <code class=\"language-text\">true</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Create a AT command handler.</p>\n<blockquote>\n<p>Note that data received from <code class=\"language-text\">uart</code> is converted to an ASCII string (1 byte to 1 char) for easy manipulation.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Create an UART instance</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">UART</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uart'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> serial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UART</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">baudrate</span><span class=\"token operator\">:</span> <span class=\"token number\">115200</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bufferSize</span><span class=\"token operator\">:</span> <span class=\"token number\">4096</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create ATCommand instance</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ATCommand <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> at <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ATCommand</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">debug</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nat<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<h3 id=\"atsendcmd-cb-waitfor-options\" style=\"position:relative;\"><a href=\"#atsendcmd-cb-waitfor-options\" aria-label=\"atsendcmd cb waitfor options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>at.send(cmd[, cb[, waitFor[, options]])</h3>\n<ul>\n<li><strong><code class=\"language-text\">cmd</code></strong> <code class=\"language-text\">&lt;string|Uint8Array></code> AT command (or data) to send. If <code class=\"language-text\">Uint8Array</code> type is given, it send as data.</li>\n<li><strong><code class=\"language-text\">cb</code></strong> <code class=\"language-text\">&lt;function(result:string)></code> Callback called when expected response is arrived.\n<ul>\n<li><strong><code class=\"language-text\">result</code></strong> <code class=\"language-text\">&lt;string></code> Result status. One of array items of <code class=\"language-text\">match</code> parameter or <code class=\"language-text\">'TIMEOUT'</code> or <code class=\"language-text\">undefined</code>.</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">waitFor</code></strong> <code class=\"language-text\">&lt;number|Array&lt;string>></code> Indicates what is expected response of the AT command. If a number of given, waits for the given time in milliseconds. <strong>Default:</strong> <code class=\"language-text\">['OK', 'ERROR', 'FAIL']</code></li>\n<li><strong><code class=\"language-text\">options</code></strong> <code class=\"language-text\">&lt;object></code>\n<ul>\n<li><strong><code class=\"language-text\">timeout</code></strong> <code class=\"language-text\">&lt;number></code> Timeout for waiting response. <strong>Default:</strong> <code class=\"language-text\">10000</code> (10 sec). When timeout, callback is called with <code class=\"language-text\">'TIMEOUT'</code> for the second parameter.</li>\n<li><strong><code class=\"language-text\">sendAsData</code></strong> <code class=\"language-text\">&lt;boolean></code> If <code class=\"language-text\">true</code>, <code class=\"language-text\">cmd</code> is sent as data without appending <code class=\"language-text\">'\\r\\n'</code> in the end. <strong>Default:</strong> <code class=\"language-text\">false</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Sends AT command and wait for expected response. If you didn't provide parameters other than <code class=\"language-text\">cmd</code>, it sends AT command and then process the next command in the queue without waiting for expected response.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">at<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AT+XXX'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// send AT command and do not wait for response</span></code></pre></div>\n<p>If you need to get response, provide <code class=\"language-text\">callback</code> and <code class=\"language-text\">match</code> parameters. If a number is given for <code class=\"language-text\">match</code> parameter, <code class=\"language-text\">callback</code> is called with the response just after waiting response for the given number of time (milliseconds).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">at<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'AT+XXX'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1000</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wait 1 sec for response</span></code></pre></div>\n<p>If an array of string is given for the <code class=\"language-text\">match</code> parameter, <code class=\"language-text\">callback</code> is called with the response and the matched item in the <code class=\"language-text\">match</code> parameter when there is a line matched with the <code class=\"language-text\">match</code> parameter in the response buffer.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">at<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'AT+XXX'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">===</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DONE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ERROR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ERROR'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FAIL'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"ataddhandlermatch-handler\" style=\"position:relative;\"><a href=\"#ataddhandlermatch-handler\" aria-label=\"ataddhandlermatch handler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>at.addHandler(match, handler)</h3>\n<ul>\n<li><strong><code class=\"language-text\">match</code></strong> <code class=\"language-text\">&lt;string></code> A match string.</li>\n<li><strong><code class=\"language-text\">handler</code></strong> <code class=\"language-text\">&lt;Function></code> Handler function.\n<ul>\n<li><code class=\"language-text\">line</code> <code class=\"language-text\">&lt;string></code> The matched line.</li>\n<li><code class=\"language-text\">buffer</code> <code class=\"language-text\">&lt;string></code> The response buffer.</li>\n</ul>\n</li>\n</ul>\n<p>Add a handler. If there is a line starts with the <code class=\"language-text\">match</code> parameter in the response buffer, the handler function will be called. The data from start to the matched line are removed from the response buffer. If you want to keep the response buffer without any changes, then just return <code class=\"language-text\">false</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">at<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WIFI DISCONNECTED'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wifi disconnected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If the handler is not enough to handle just the matched line, you can manipulate the entire response buffer by returning the handled data.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Handle +IPD response of ESP8266</span>\n<span class=\"token comment\">// e.g.) \"+IPD,11:Hello,World\"</span>\nat<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">'+IPD,'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line<span class=\"token punctuation\">,</span> buffer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// if received all data in buffer</span>\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> remained <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> remained<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// if not received all data in buffer</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"atremovehandlermatch\" style=\"position:relative;\"><a href=\"#atremovehandlermatch\" aria-label=\"atremovehandlermatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>at.removeHandler(match)</h3>\n<ul>\n<li><strong><code class=\"language-text\">match</code></strong> <code class=\"language-text\">{string}</code> </li>\n</ul>\n<p>Remove a line handler.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">at<span class=\"token punctuation\">.</span><span class=\"token function\">addLineHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WIFI DISCONNECTED'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wifi disconnected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nat<span class=\"token punctuation\">.</span><span class=\"token function\">removeLineHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WIFI DISCONNECTED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"atbuffer\" style=\"position:relative;\"><a href=\"#atbuffer\" aria-label=\"atbuffer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>at.buffer</h3>\n<ul>\n<li><code class=\"language-text\">{string}</code></li>\n</ul>\n<p>Response buffer for the responses of AT commands.</p>"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"category":"","order":0,"slug":"__packages","title":"Packages"}},{"frontmatter":{"category":"root","order":2,"slug":"docs/repl","title":"REPL"}},{"frontmatter":{"category":"root","order":3,"slug":"docs/tutorials","title":"Tutorials"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/adc","title":"ADC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/at-command","title":"AT Command"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/console","title":"Console"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/analog-io","title":"Analog I/O"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico","title":"Pico"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/board","title":"Board"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/errors","title":"Errors"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/events","title":"Events"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/flash","title":"Flash"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/global","title":"Global"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/file-system","title":"File system"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/digital-io","title":"Digital I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/gpio","title":"GPIO"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/graphics","title":"Graphics"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/led","title":"LED"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/interrupts","title":"Interrupts"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/http","title":"HTTP"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/net","title":"Net"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/i2c","title":"I2C"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/path","title":"Path"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/pwm","title":"PWM"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/process","title":"Process"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/button","title":"Button"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/sdcard","title":"SDCard"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/storage","title":"Storage"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rtc","title":"RTC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/uart","title":"UART"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/timers","title":"Timers"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/url","title":"URL"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/stream","title":"Stream"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wdt","title":"WDT"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rp2","title":"RP2"}},{"frontmatter":{"category":"root","order":0,"slug":"docs","title":"Introduction"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico2-w","title":"Pico2 W"}},{"frontmatter":{"category":"root","order":1,"slug":"docs/getting-started","title":"Getting Started"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico2","title":"Pico2"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/device-driver","title":"Device Driver"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/spi","title":"SPI"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico-w","title":"Pico W"}},{"frontmatter":{"category":"","order":0,"slug":"__home","title":"Home"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wifi","title":"Wi-Fi"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/cyw43","title":"CYW43"}}]}},"pageContext":{"slug":"docs/api/at-command"}},
    "staticQueryHashes": []}