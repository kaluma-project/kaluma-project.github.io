{
    "componentChunkName": "component---src-templates-doc-js",
    "path": "/docs/api/analog-io",
    "result": {"data":{"markdownRemark":{"frontmatter":{"layout":"doc.js","slug":"docs/api/analog-io","title":"Analog I/O"},"html":"<h1 id=\"analog-io\" style=\"position:relative;\"><a href=\"#analog-io\" aria-label=\"analog io permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Analog I/O</h1>\n<h2 id=\"analogreadpin-a-hrefanalogread-idanalogreada\" style=\"position:relative;\"><a href=\"#analogreadpin-a-hrefanalogread-idanalogreada\" aria-label=\"analogreadpin a hrefanalogread idanalogreada permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>analogRead(pin) <a href=\"#analogread\" id=\"analogread\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support ADC function.</li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;number></code>, the value is in between <code class=\"language-text\">0.0</code> ~ <code class=\"language-text\">1.0</code></li>\n</ul>\n<p>Read and return analog signal value from the ADC <strong><code class=\"language-text\">pin</code></strong>. A <code class=\"language-text\">RangeError</code> will be thrown if the <strong><code class=\"language-text\">pin</code></strong> does not support ADC function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Read analog value on pin 26.</span>\n<span class=\"token keyword\">var</span> pin <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token function\">analogRead</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"analogwritepin-duty-frequency-a-hrefanalogwrite-idanalogwritea\" style=\"position:relative;\"><a href=\"#analogwritepin-duty-frequency-a-hrefanalogwrite-idanalogwritea\" aria-label=\"analogwritepin duty frequency a hrefanalogwrite idanalogwritea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>analogWrite(pin[, duty[, frequency]]) <a href=\"#analogwrite\" id=\"analogwrite\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support PWM function.</li>\n<li><strong><code class=\"language-text\">duty</code></strong> <code class=\"language-text\">&lt;number></code> The PWM duty cycle between <code class=\"language-text\">0.0</code> and <code class=\"language-text\">1.0</code>. <strong>Default:</strong> <code class=\"language-text\">0.5</code></li>\n<li><strong><code class=\"language-text\">frequency</code></strong> <code class=\"language-text\">&lt;number></code> The PWM frequency in Hz. <strong>Default:</strong> <code class=\"language-text\">490</code>Hz</li>\n</ul>\n<p>Generate PWM signal with specific <strong><code class=\"language-text\">frequency</code></strong> and <strong><code class=\"language-text\">duty</code></strong> to the PWM <strong><code class=\"language-text\">pin</code></strong>. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">pin</code></strong> does not support PWM function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Generate 490 Hz 50% duth PWM signal.</span>\n<span class=\"token keyword\">var</span> pin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">analogWrite</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"tonepin-frequency-options-a-hreftone-idtonea\" style=\"position:relative;\"><a href=\"#tonepin-frequency-options-a-hreftone-idtonea\" aria-label=\"tonepin frequency options a hreftone idtonea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tone(pin[, frequency[, options]]) <a href=\"#tone\" id=\"tone\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support PWM function.</li>\n<li><strong><code class=\"language-text\">frequency</code></strong> <code class=\"language-text\">&lt;number></code> The PWM frequency in Hz. <strong>Default:</strong> <code class=\"language-text\">261.626</code>Hz (C Key)</li>\n<li><strong><code class=\"language-text\">options</code></strong> <code class=\"language-text\">&lt;object></code>\n<ul>\n<li><strong><code class=\"language-text\">duration</code></strong> <code class=\"language-text\">&lt;number></code> The duration in milliseconds if a duration is not 0, duration 0 is forever. <strong>Default:</strong> <code class=\"language-text\">0</code></li>\n<li><strong><code class=\"language-text\">duty</code></strong> <code class=\"language-text\">&lt;number></code> The PWM duty cycle between <code class=\"language-text\">0.0</code> and <code class=\"language-text\">1.0</code>. <strong>Default:</strong> <code class=\"language-text\">0.5</code></li>\n<li><strong><code class=\"language-text\">inversion</code></strong> <code class=\"language-text\">&lt;number></code> The pin number where an inverted signal to be generated. <strong>Default:</strong> <code class=\"language-text\">-1</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Generate sound tone(PWM) on the PWM <strong><code class=\"language-text\">pin</code></strong> for <strong><code class=\"language-text\">duration</code></strong>. A <strong><code class=\"language-text\">frequency</code></strong> and <strong><code class=\"language-text\">duty</code></strong> can be set. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">pin</code></strong> does not support PWM function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Generate 300 Hz tone on the pin 0 for 1sec.</span>\n<span class=\"token function\">tone</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Generate 300Hz tone on the pin 0 for 1sec.</span></code></pre></div>\n<p>You can generate an inverted signal of the original PWM signal on another pin. Using this you can generate louder sound on a speaker by wiring two wires of the speaker to the two pins of a same PWM slice instead of wiring to one of PWM pin and GND.</p>\n<blockquote>\n<p>Note that the inversion pin should be the different channel of the same slice. For example, pin 9 can be used for inversion for the pin 8. See <a href=\"../boards/raspberry-pi-pico.md#pwm\">here</a> for more about PWM slide and channels.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Generate 300 Hz tone on the pin 8 and the inverted signal on the pin 9.</span>\n<span class=\"token function\">tone</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">inversion</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"notonepin-a-hrefnotone-idnotonea\" style=\"position:relative;\"><a href=\"#notonepin-a-hrefnotone-idnotonea\" aria-label=\"notonepin a hrefnotone idnotonea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>noTone(pin) <a href=\"#notone\" id=\"notone\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support PWM function.</li>\n</ul>\n<p>Stop the tone one the PWM <strong><code class=\"language-text\">pin</code></strong>. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">pin</code></strong> does not support PWM function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Generate 200 Hz tone to the pin 0 and stop the tone after 1sec.</span>\n<span class=\"token function\">tone</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Generate 200Hz tone on the pin 0.</span>\n<span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Wait for 1000ms (1sec)</span>\n<span class=\"token function\">noTone</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stop the tone on the pin 0</span></code></pre></div>"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"category":"","order":0,"slug":"__home","title":"Home"}},{"frontmatter":{"category":"","order":0,"slug":"__packages","title":"Packages"}},{"frontmatter":{"category":"root","order":2,"slug":"docs/repl","title":"REPL"}},{"frontmatter":{"category":"root","order":1,"slug":"docs/getting-started","title":"Getting Started"}},{"frontmatter":{"category":"root","order":0,"slug":"docs","title":"Introduction"}},{"frontmatter":{"category":"root","order":3,"slug":"docs/tutorials","title":"Tutorials"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico-w","title":"Pico W"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico","title":"Pico"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/adc","title":"ADC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/button","title":"Button"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/analog-io","title":"Analog I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/at-command","title":"AT Command"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/console","title":"Console"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/digital-io","title":"Digital I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/cyw43","title":"CYW43"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/device-driver","title":"Device Driver"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/board","title":"Board"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/errors","title":"Errors"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/events","title":"Events"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/file-system","title":"File system"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/flash","title":"Flash"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/global","title":"Global"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/gpio","title":"GPIO"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/graphics","title":"Graphics"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/http","title":"HTTP"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/i2c","title":"I2C"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/interrupts","title":"Interrupts"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/led","title":"LED"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/net","title":"Net"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/path","title":"Path"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/process","title":"Process"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/pwm","title":"PWM"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rp2","title":"RP2"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rtc","title":"RTC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/sdcard","title":"SDCard"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/spi","title":"SPI"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/storage","title":"Storage"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/stream","title":"Stream"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/timers","title":"Timers"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/uart","title":"UART"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/url","title":"URL"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wifi","title":"Wi-Fi"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wdt","title":"WDT"}}]}},"pageContext":{"slug":"docs/api/analog-io"}},
    "staticQueryHashes": []}