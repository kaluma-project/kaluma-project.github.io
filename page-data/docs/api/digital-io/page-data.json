{
    "componentChunkName": "component---src-templates-doc-js",
    "path": "/docs/api/digital-io",
    "result": {"data":{"markdownRemark":{"frontmatter":{"layout":"doc.js","slug":"docs/api/digital-io","title":"Digital I/O"},"html":"<h1 id=\"digital-io\" style=\"position:relative;\"><a href=\"#digital-io\" aria-label=\"digital io permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Digital I/O</h1>\n<h2 id=\"pinmodepin-mode-a-hrefpinmode-idpinmodea\" style=\"position:relative;\"><a href=\"#pinmodepin-mode-a-hrefpinmode-idpinmodea\" aria-label=\"pinmodepin mode a hrefpinmode idpinmodea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pinMode(pin[, mode]) <a href=\"#pinmode\" id=\"pinmode\"></a></h2>\n<ul>\n<li>\n<p><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number|number[]></code> The pin number (or array of pin numbers) which can support GPIO function.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">mode</code></strong> <code class=\"language-text\">&lt;number></code> The pin mode <code class=\"language-text\">INPUT (0)</code> or <code class=\"language-text\">OUTPUT (1)</code>or <code class=\"language-text\">INPUT_PULLUP (2)</code> *<strong>* or <code class=\"language-text\">INPUT_PULLDOWN (3)</code></strong>.**</p>\n<p>. <strong>Default:</strong> <code class=\"language-text\">INPUT</code></p>\n</li>\n</ul>\n<p>Set the mode of the GPIO <strong><code class=\"language-text\">pin</code></strong> to <code class=\"language-text\">INPUT</code> , <code class=\"language-text\">OUTPUT</code>, <code class=\"language-text\">INPUT_PULLUP</code>, or <code class=\"language-text\">INPUT_PULLDOWN</code>. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">pin</code></strong> does not support GPIO function. Use <code class=\"language-text\">INPUT_PULLUP</code>when you want to enable internal pull-up for this <strong><code class=\"language-text\">pin</code></strong> and use <code class=\"language-text\">INPUT_PULLDOWN</code> when you want to enable internal pull-down.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Set pin 1 to output mode.</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin 1 to output mode.</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HIGH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin 1 to HIGH.</span></code></pre></div>\n<p>You can set mode for multiple GPIO pins at once by passing an array of pin numbers.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// equivalent to</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"digitalreadpin-a-hrefdigitalread-iddigitalreada\" style=\"position:relative;\"><a href=\"#digitalreadpin-a-hrefdigitalread-iddigitalreada\" aria-label=\"digitalreadpin a hrefdigitalread iddigitalreada permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>digitalRead(pin) <a href=\"#digitalread\" id=\"digitalread\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support GPIO function.</li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;number></code> The return value is <code class=\"language-text\">HIGH (1)</code> or <code class=\"language-text\">LOW (0)</code></li>\n</ul>\n<p>Read the digital input from the GPIO INPUT <strong><code class=\"language-text\">pin</code></strong>. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">pin</code></strong> does not support GPIO function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Read digital value from the pin 1.</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin 1 to input mode</span>\n<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token function\">digitalRead</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Read the value from the pin 1.</span></code></pre></div>\n<h2 id=\"digitalwritepin-value-a-hrefdigitalwrite-iddigitalwritea\" style=\"position:relative;\"><a href=\"#digitalwritepin-value-a-hrefdigitalwrite-iddigitalwritea\" aria-label=\"digitalwritepin value a hrefdigitalwrite iddigitalwritea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>digitalWrite(pin[, value]) <a href=\"#digitalwrite\" id=\"digitalwrite\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number|number[]></code> The pin number (or array of pin numbers) which can support GPIO function.</li>\n<li><strong><code class=\"language-text\">value</code></strong> <code class=\"language-text\">&lt;number></code> The value could be <code class=\"language-text\">HIGH (1)</code> or <code class=\"language-text\">LOW (0)</code>. If an array of pin numbers are given a number (greater than 1) can be used. <strong>Default:</strong> <code class=\"language-text\">LOW</code></li>\n</ul>\n<p>Set the GPIO OUTPUT <strong><code class=\"language-text\">pin</code></strong> to <code class=\"language-text\">HIGH</code> or <code class=\"language-text\">LOW</code>. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">pin</code></strong> does not support GPIO function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Set the pin 1 to HIGH.</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin 1 to output mode</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HIGH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin 1 to HIGH</span></code></pre></div>\n<p>You can set multiple GPIO pins at once by passing an array of pin numbers. The last element in the array corresponds to the last significant bit (LSB) of the value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span>pins<span class=\"token punctuation\">,</span> <span class=\"token number\">0b11001010</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// equivalent to</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HIGH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HIGH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HIGH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HIGH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"digitaltogglepin-a-hrefdigitaltoggle-iddigitaltogglea\" style=\"position:relative;\"><a href=\"#digitaltogglepin-a-hrefdigitaltoggle-iddigitaltogglea\" aria-label=\"digitaltogglepin a hrefdigitaltoggle iddigitaltogglea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>digitalToggle(pin) <a href=\"#digitaltoggle\" id=\"digitaltoggle\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support GPIO function.</li>\n</ul>\n<p>Set the GPIO OUTPUT <strong><code class=\"language-text\">pin</code></strong> to the reverse state of the current state. Set to <code class=\"language-text\">HIGH</code> if the current state is <code class=\"language-text\">LOW</code>. Set to <code class=\"language-text\">LOW</code> if the current state is <code class=\"language-text\">HIGH</code>. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">pin</code></strong> does not support GPIO function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Set the pin 1 to HIGH and toggle (Set to LOW)</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin 1 to GPIO OUTPUT</span>\n<span class=\"token function\">digitalWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HIGH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin 1 to HIGH</span>\n<span class=\"token function\">digitalToggle</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Toggle the pin 1, change the pin state to LOW from HIGH.</span></code></pre></div>\n<h2 id=\"setwatchcallback-pin-events-debounce-a-hrefsetwatch-idsetwatcha\" style=\"position:relative;\"><a href=\"#setwatchcallback-pin-events-debounce-a-hrefsetwatch-idsetwatcha\" aria-label=\"setwatchcallback pin events debounce a hrefsetwatch idsetwatcha permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setWatch(callback, pin[, events[, debounce]]) <a href=\"#setwatch\" id=\"setwatch\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">callback</code></strong> <code class=\"language-text\">&lt;function></code> The function is called when the <strong><code class=\"language-text\">event</code></strong> is triggered on the <strong><code class=\"language-text\">pin.</code></strong>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number is passed as the first argument to the callback. </li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support GPIO function.</li>\n<li><strong><code class=\"language-text\">events</code></strong> <code class=\"language-text\">&lt;number></code> set the events of the <code class=\"language-text\">pin</code>. There are five events, <code class=\"language-text\">LOW_LEVEL (1)</code>, <code class=\"language-text\">HIGH_LEVEL (2)</code> <code class=\"language-text\">FALLING (4)</code>, <code class=\"language-text\">RISING (8)</code>, and <code class=\"language-text\">CHANGE (12)</code>. <strong>Default:</strong> <code class=\"language-text\">CHANGE</code>.</li>\n<li><strong><code class=\"language-text\">debounce</code></strong> <code class=\"language-text\">&lt;number></code> debounce time in ms (milliseconds). <strong>Default:</strong> <code class=\"language-text\">0</code>ms</li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;number></code> the ID of the watcher.</li>\n</ul>\n<p>Run the <strong><code class=\"language-text\">callback</code></strong> function when the <strong><code class=\"language-text\">events</code></strong> is triggered on the <strong><code class=\"language-text\">pin</code></strong>. There are five events. The <code class=\"language-text\">FALLING</code> event is triggered when the <strong><code class=\"language-text\">pin</code></strong> state is changed from <code class=\"language-text\">HIGH</code> to <code class=\"language-text\">LOW</code>. The <code class=\"language-text\">LOW_LEVEL (1)</code>event is triggered when the <strong><code class=\"language-text\">pin</code></strong> is <code class=\"language-text\">LOW</code> state and The <code class=\"language-text\">HIGH_LEVEL (2)</code> event is triggered when the <strong><code class=\"language-text\">pin</code></strong> is <code class=\"language-text\">HIGH</code> state. The <code class=\"language-text\">RISING (1)</code> event is triggered when the <strong><code class=\"language-text\">pin</code></strong> state is changed from <code class=\"language-text\">LOW</code> to <code class=\"language-text\">HIGH</code>. The <code class=\"language-text\">CHANGE</code> event is triggered when the <strong><code class=\"language-text\">pin</code></strong> state is changed to any states, which means the <code class=\"language-text\">CHANGE</code> event is the same as the <code class=\"language-text\">FALLING</code> + <code class=\"language-text\">RISING</code> events. The <strong><code class=\"language-text\">debounce</code></strong> time can be set when you can see the bouncing on the GPIO <strong><code class=\"language-text\">pin</code></strong>. A <code class=\"language-text\">RangeError</code> will be thrown if <strong><code class=\"language-text\">pin</code></strong> does not support GPIO function.</p>\n<p>Before calling this function, you have to set the pin mode as <code class=\"language-text\">INPUT</code> , <code class=\"language-text\">INPUT_PULLUP</code> or <code class=\"language-text\">INPUT_PULLDOWN</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Print out 'click' string to the terminal when user press the button.</span>\n<span class=\"token keyword\">var</span> pin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pin to watch</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> <span class=\"token constant\">INPUT_PULLDOWN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin mode to INPUT_PULLDOWN.</span>\n<span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setWatch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Print out the 'click' to the terminal.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  pin<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">RISING</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set falling event with 10ms debouncing time.</span></code></pre></div>\n<h2 id=\"clearwatchid-a-hrefclearwatch-idclearwatcha\" style=\"position:relative;\"><a href=\"#clearwatchid-a-hrefclearwatch-idclearwatcha\" aria-label=\"clearwatchid a hrefclearwatch idclearwatcha permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>clearWatch(id) <a href=\"#clearwatch\" id=\"clearwatch\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">id</code></strong> <code class=\"language-text\">&lt;number></code> The ID of the watcher which is the return value of the <code class=\"language-text\">setWatch()</code> function.</li>\n</ul>\n<p>Stop watching the event which is set by <code class=\"language-text\">setWatch()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Print out 'click' string to the terminal when user press the button.</span>\n<span class=\"token keyword\">var</span> pin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pin to watch</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> <span class=\"token constant\">INPUT_PULLDOWN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the pin mode to INPUT_PULLDOWN.</span>\n<span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setWatch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Print out the 'click' to the terminal.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  pin<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">RISING</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set falling event with 10ms debouncing time.</span>\n<span class=\"token function\">clearWatch</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stop watching the on-board pin event.</span></code></pre></div>\n<h2 id=\"pulsereadpin-count-options-a-hrefpulseread-idpulsereada\" style=\"position:relative;\"><a href=\"#pulsereadpin-count-options-a-hrefpulseread-idpulsereada\" aria-label=\"pulsereadpin count options a hrefpulseread idpulsereada permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pulseRead(pin, count[, options]) <a href=\"#pulseread\" id=\"pulseread\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support GPIO function.</li>\n<li><strong><code class=\"language-text\">count</code></strong> <code class=\"language-text\">&lt;number></code> The number of pulse to read.</li>\n<li><strong><code class=\"language-text\">options</code></strong> <code class=\"language-text\">&lt;object></code> \n<ul>\n<li><strong><code class=\"language-text\">timeout</code></strong> <code class=\"language-text\">&lt;number></code> timeout in us(microseconds). <strong>Default:</strong> <code class=\"language-text\">1000000</code></li>\n<li><strong><code class=\"language-text\">startState</code></strong> <code class=\"language-text\">&lt;number></code> Start to read the pulse from this state. <strong>Default:</strong> <code class=\"language-text\">undefined</code></li>\n<li>**<code class=\"language-text\">mode</code> ** <code class=\"language-text\">&lt;number></code> Pin mode to read pulse.</li>\n<li><strong><code class=\"language-text\">trigger</code></strong> <code class=\"language-text\">&lt;object></code> \n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> Pin number to trigger. <strong>Default:</strong> same with <code class=\"language-text\">pin</code> </li>\n<li><strong><code class=\"language-text\">startState</code></strong> <code class=\"language-text\">&lt;number></code> Start state for trigger. <strong>Default:</strong> <code class=\"language-text\">LOW</code> </li>\n<li><strong><code class=\"language-text\">interval</code></strong> <code class=\"language-text\">&lt;number[]></code> Pulse timing in microseconds. Refer to <code class=\"language-text\">pulseWrite</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;number[]></code> Array of the pulse timing. It returns <code class=\"language-text\">null</code> if the pin state is not changed until <strong><code class=\"language-text\">timeout</code></strong></li>\n</ul>\n<p>Read the <strong><code class=\"language-text\">pin</code></strong> state change timing from <strong><code class=\"language-text\">startState</code></strong>. It returns the microseconds state changing timing if the state is changed <strong><code class=\"language-text\">count</code></strong> times or for <strong><code class=\"language-text\">timeout</code></strong> microseconds.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Read 10 pulse timing on the pin 0</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pulse <span class=\"token operator\">=</span> <span class=\"token function\">pulseRead</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pulse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If <strong><code class=\"language-text\">startState</code></strong> is <code class=\"language-text\">HIGH (1)</code> the system wait until the pin state to <code class=\"language-text\">HIGH</code> and start to measure pulse timing. The If <strong><code class=\"language-text\">startState</code></strong> is<code class=\"language-text\">undefined</code>, the system start to measure pulse timing immediately and user can't know which pulse timing is <code class=\"language-text\">HIGH</code> or <code class=\"language-text\">LOW</code>. Assume that the pulses are given as below timing diagram, you can get <code class=\"language-text\">[30, 20, 50]</code> with the below example code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Read 10 pulse timing with 50ms timeout.</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Wait until HIGH state detection</span>\n<span class=\"token keyword\">var</span> pulse <span class=\"token operator\">=</span> <span class=\"token function\">pulseRead</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">50000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">startState</span><span class=\"token operator\">:</span> <span class=\"token constant\">HIGH</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pulse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [30, 20, 50]</span></code></pre></div>\n<p><img src=\"/images/doc-digital-io-pulse-read.png\" alt=\"A pulse example\"></p>\n<p>If <strong><code class=\"language-text\">trigger</code></strong> options is given, it generates trigger pulse just before to read pulse. The fields of trigger object is corresponds to the parameter of <code class=\"language-text\">pulseWrite()</code>. It is useful to avoid the delay time between triggering and pulse reading.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 10us trigger pulse before reading</span>\n<span class=\"token keyword\">var</span> pulse <span class=\"token operator\">=</span> <span class=\"token function\">pulseRead</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token constant\">INPUT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">trigger</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">pin</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">startState</span><span class=\"token operator\">:</span> <span class=\"token constant\">LOW</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">interval</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pulse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You should be consider the CPU process time in the very first output array data. This means that the very first timing data is less than your expected timing due to CPU process time.</p>\n<h2 id=\"pulsewritepin-startstate-interval-a-hrefpulsewrite-idpulsewritea\" style=\"position:relative;\"><a href=\"#pulsewritepin-startstate-interval-a-hrefpulsewrite-idpulsewritea\" aria-label=\"pulsewritepin startstate interval a hrefpulsewrite idpulsewritea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pulseWrite(pin, startState, interval) <a href=\"#pulsewrite\" id=\"pulsewrite\"></a></h2>\n<ul>\n<li><strong><code class=\"language-text\">pin</code></strong> <code class=\"language-text\">&lt;number></code> The pin number which can support GPIO function.</li>\n<li><strong><code class=\"language-text\">startState</code></strong> <code class=\"language-text\">&lt;number></code> Start state.</li>\n<li><strong><code class=\"language-text\">interval</code></strong> <code class=\"language-text\">&lt;number[]></code> Pulse timing in microseconds.</li>\n<li><strong>Returns:</strong> <code class=\"language-text\">&lt;number></code> Length of the written pulse, it's the same as the length of the <strong><code class=\"language-text\">interval</code></strong> array.</li>\n</ul>\n<p>Generates the digital pulse on the <strong><code class=\"language-text\">pin</code></strong> with microseconds timing. The state change timing from <strong><code class=\"language-text\">startState</code></strong>. It returns the number of the written pulse.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Generates pulse on the pin 0</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pulseWrite</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOW</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"/images/doc-digital-io-pulse-write.png\" alt=\"Pulse generated\"></p>"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"category":"","order":0,"slug":"__home","title":"Home"}},{"frontmatter":{"category":"","order":0,"slug":"__packages","title":"Packages"}},{"frontmatter":{"category":"root","order":1,"slug":"docs/getting-started","title":"Getting Started"}},{"frontmatter":{"category":"root","order":0,"slug":"docs","title":"Introduction"}},{"frontmatter":{"category":"root","order":2,"slug":"docs/repl","title":"REPL"}},{"frontmatter":{"category":"root","order":3,"slug":"docs/tutorials","title":"Tutorials"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico-w","title":"Pico W"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico","title":"Pico"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/adc","title":"ADC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/analog-io","title":"Analog I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/at-command","title":"AT Command"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/button","title":"Button"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/console","title":"Console"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/digital-io","title":"Digital I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/cyw43","title":"CYW43"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/device-driver","title":"Device Driver"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/errors","title":"Errors"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/events","title":"Events"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/file-system","title":"File system"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/flash","title":"Flash"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/http","title":"HTTP"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/gpio","title":"GPIO"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/graphics","title":"Graphics"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/global","title":"Global"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/i2c","title":"I2C"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/interrupts","title":"Interrupts"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/led","title":"LED"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/net","title":"Net"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/path","title":"Path"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/process","title":"Process"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/pwm","title":"PWM"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rp2","title":"RP2"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rtc","title":"RTC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/sdcard","title":"SDCard"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/spi","title":"SPI"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/storage","title":"Storage"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/stream","title":"Stream"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/timers","title":"Timers"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/uart","title":"UART"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/url","title":"URL"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wdt","title":"WDT"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wifi","title":"Wi-Fi"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/board","title":"Board"}}]}},"pageContext":{"slug":"docs/api/digital-io"}},
    "staticQueryHashes": []}