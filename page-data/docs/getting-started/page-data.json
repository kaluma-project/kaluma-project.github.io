{
    "componentChunkName": "component---src-templates-doc-js",
    "path": "/docs/getting-started",
    "result": {"data":{"markdownRemark":{"frontmatter":{"layout":"doc.js","slug":"docs/getting-started","title":"Getting Started"},"html":"<h1 id=\"getting-started\" style=\"position:relative;\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h1>\n<p>In this article we will give you a quick tutorial to get start within 10 minutes.</p>\n<h2 id=\"get-a-rasberry-pi-pico\" style=\"position:relative;\"><a href=\"#get-a-rasberry-pi-pico\" aria-label=\"get a rasberry pi pico permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get a Rasberry Pi Pico</h2>\n<p>Get a <a href=\"https://www.raspberrypi.org/products/raspberry-pi-pico/\">Raspberry Pi Pico</a> board or other RP2040 board.</p>\n<h2 id=\"install-firmware\" style=\"position:relative;\"><a href=\"#install-firmware\" aria-label=\"install firmware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install firmware</h2>\n<p><img src=\"/images/pico-bootsel.png\" alt=\"Pico\"></p>\n<ul>\n<li><a href=\"/download\">Download</a> firmware (<strong>.UF2</strong>).</li>\n<li>Push and hold the <strong>BOOTSEL</strong> button and plug into USB port of your computer, and then release the button. It will mount as USB storage device named <strong>RPI-RP2</strong>.</li>\n<li>Drag and drop the downloaded <strong>.UF2</strong> onto the <strong>RPI-RP2</strong> volume. Your Pico will reboot automatically.</li>\n</ul>\n<h2 id=\"install-cli-command-line-interface\" style=\"position:relative;\"><a href=\"#install-cli-command-line-interface\" aria-label=\"install cli command line interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install CLI (Command-Line Interface)</h2>\n<p>First of all, we have to install <a href=\"https://github.com/kaluma-project/kaluma-cli\">Kaluma CLI</a> in your local computer to work with boards Kaluma installed. Of course, it is assumed that <a href=\"https://nodejs.org\">Node.js</a> is installed.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @kaluma/cli</code></pre></div>\n<p>After installation you can see help message with <code class=\"language-text\">help</code> command.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kaluma <span class=\"token builtin class-name\">help</span></code></pre></div>\n<h2 id=\"connect-with-terminal\" style=\"position:relative;\"><a href=\"#connect-with-terminal\" aria-label=\"connect with terminal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connect with Terminal</h2>\n<p>Once you installed the firmware, you can use the board in <a href=\"/docs/repl\">REPL</a> mode with any ANSI/VT100 compatible serial terminals. CLI provides a simple serial terminal feature with <code class=\"language-text\">shell</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kaluma shell\n\n<span class=\"token comment\"># you can specify a serial port</span>\n$ kaluma shell --port /dev/tty.usbmodem0000000000001\n\n<span class=\"token comment\"># to see all available serial ports</span>\n$ kaluma ports</code></pre></div>\n<p>Then you will see a welcome message and the prompt <code class=\"language-text\">></code> (If you cannot see the prompt, press <code class=\"language-text\">Enter</code> several times). On the prompt you can enter any JavaScript expressions or <a href=\"/docs/repl\">REPL commands</a>. Type <code class=\"language-text\">.help</code> command, you will see all available REPL commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">> .help</code></pre></div>\n<p>You can exit the CLI shell connection by pressing <code class=\"language-text\">ctrl+z</code>.</p>\n<p>You can use other serial terminal programs including <code class=\"language-text\">screen</code> command in macOS and Linux, or <a href=\"https://www.putty.org/\">PuTTY</a> in Windows.</p>\n<h2 id=\"setup-project\" style=\"position:relative;\"><a href=\"#setup-project\" aria-label=\"setup project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup project</h2>\n<p>To create a project, simply make a directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> kaluma-app\n$ <span class=\"token builtin class-name\">cd</span> kaluma-app</code></pre></div>\n<p>We recommend to initialize the project with NPM to create <code class=\"language-text\">package.json</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init -y</code></pre></div>\n<h2 id=\"write-your-code\" style=\"position:relative;\"><a href=\"#write-your-code\" aria-label=\"write your code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Write your code</h2>\n<p>Let's write the first blink code <code class=\"language-text\">index.js</code> in the project folder with any text editor (VSCode, Atom, Sublime Text, etc).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> led <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pinMode</span><span class=\"token punctuation\">(</span>led<span class=\"token punctuation\">,</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">digitalToggle</span><span class=\"token punctuation\">(</span>led<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"flash-your-code\" style=\"position:relative;\"><a href=\"#flash-your-code\" aria-label=\"flash your code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flash your code</h2>\n<p>Use CLI to flash <code class=\"language-text\">index.js</code> to your board.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kaluma flash index.js</code></pre></div>\n<p>After uploading successfully, you will see a blinking LED on the board.</p>\n<h2 id=\"install-third-party-packages\" style=\"position:relative;\"><a href=\"#install-third-party-packages\" aria-label=\"install third party packages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install third-party packages</h2>\n<p>You can install third-party packages with NPM. You can find third-party packages for Kaluma in <a href=\"/packages\">Packages</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> https://github.com/niklauslee/dht --save</code></pre></div>\n<p>Then you can import the package with <code class=\"language-text\">require()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">DHT</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dht'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"bundle-multiple-files\" style=\"position:relative;\"><a href=\"#bundle-multiple-files\" aria-label=\"bundle multiple files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bundle multiple files</h2>\n<p>Please remember that only a single <code class=\"language-text\">.js</code> file can be flashed in Kaluma. If you are using multiple <code class=\"language-text\">.js</code> files or using third-party modules installed by <code class=\"language-text\">npm install</code>, you have to bundle them into the a single <code class=\"language-text\">.js</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kaluma bundle ./index.js</code></pre></div>\n<p>You can find <code class=\"language-text\">bundle.js</code> file and flash the bundled code.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kaluma flash ./bundle.js</code></pre></div>\n<p>Or shorty, you can bundle and flash at once with <code class=\"language-text\">--bundle</code> option.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kaluma flash ./index.js --bundle</code></pre></div>\n<h2 id=\"debug\" style=\"position:relative;\"><a href=\"#debug\" aria-label=\"debug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debug</h2>\n<p>To check the errors raised during the code execution, you need to connect with serial terminal again. However CLI's <code class=\"language-text\">flash</code> command will load the code automatically so you can't see the error messages. So you have to use <code class=\"language-text\">--shell</code> option to flash code with shell connection.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kaluma flash ./index.js --bundle --shell</code></pre></div>\n<p>Then you can see all console logs and errors because shell connection still alive even after flashing code. Hit <code class=\"language-text\">ctrl+z</code> to quit.</p>\n<p>Sometimes the flashed code can crash the board. Because Kaluma automatically execute the code in flash on boot, you have no way to recover the board in software manner. In this case you can skip code loading on boot by wiring <code class=\"language-text\">GP22</code> pin and <code class=\"language-text\">GND</code> pin (See <a href=\"/docs/boards/pico/#skip-code-loading-on-boot\">Skip code loading on boot</a>). Then you can connect with terminal and you can erase the code from the internal flash in REPL mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">> .flash -e</code></pre></div>"},"allMarkdownRemark":{"nodes":[{"frontmatter":{"category":"","order":0,"slug":"__home","title":"Home"}},{"frontmatter":{"category":"","order":0,"slug":"__packages","title":"Packages"}},{"frontmatter":{"category":"root","order":1,"slug":"docs/getting-started","title":"Getting Started"}},{"frontmatter":{"category":"root","order":0,"slug":"docs","title":"Introduction"}},{"frontmatter":{"category":"root","order":2,"slug":"docs/repl","title":"REPL"}},{"frontmatter":{"category":"root","order":3,"slug":"docs/tutorials","title":"Tutorials"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico-w","title":"Pico W"}},{"frontmatter":{"category":"board","order":0,"slug":"docs/boards/pico","title":"Pico"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/adc","title":"ADC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/analog-io","title":"Analog I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/at-command","title":"AT Command"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/button","title":"Button"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/console","title":"Console"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/digital-io","title":"Digital I/O"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/cyw43","title":"CYW43"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/device-driver","title":"Device Driver"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/errors","title":"Errors"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/events","title":"Events"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/file-system","title":"File system"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/flash","title":"Flash"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/http","title":"HTTP"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/gpio","title":"GPIO"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/graphics","title":"Graphics"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/global","title":"Global"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/i2c","title":"I2C"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/interrupts","title":"Interrupts"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/led","title":"LED"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/net","title":"Net"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/path","title":"Path"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/process","title":"Process"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/pwm","title":"PWM"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rp2","title":"RP2"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/rtc","title":"RTC"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/sdcard","title":"SDCard"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/spi","title":"SPI"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/storage","title":"Storage"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/stream","title":"Stream"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/timers","title":"Timers"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/uart","title":"UART"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/url","title":"URL"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wdt","title":"WDT"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/wifi","title":"Wi-Fi"}},{"frontmatter":{"category":"api","order":null,"slug":"docs/api/board","title":"Board"}}]}},"pageContext":{"slug":"docs/getting-started"}},
    "staticQueryHashes": []}